/**
  * Created by rajeevprasanna on 2/10/16.
  */
object PE2 extends App {

//  Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, â€¦
//  Find the sum of all the even-valued terms in the sequence which do not exceed four million.
    lazy val fib:Stream[Int] = Stream.cons(0, Stream.cons(1, fib.zip(fib.tail).map(p => p._1 + p._2)))
    fib.filter(_ % 2==0).takeWhile(_<=4000000).foldLeft(0)(_ + _)


    def fibonacciSequence:Stream[Long] = {
        def fibonacciFrom(a:Long, b:Long):Stream[Long] = a #:: fibonacciFrom(b, a+b)
        fibonacciFrom(0, 1)
    }
}
